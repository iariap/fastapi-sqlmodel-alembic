[tool.poetry]
name = "fanspark"
description = "FanSpark proposal template"
version = "0.0.1"
authors=["the sparkers"]

[tool.poetry.dependencies]
python = "^3.12"
fastapi="^0.109.0"
uvicorn="^0.22.0"
sqlmodel="^0.0.14"
SQLAlchemy="^2.0.25"
alembic="^1.13.1"
asyncpg="^0.29.0"
pydantic-settings="^2.1.0"
fastapi-pagination="^0.12.14"
httpx = "^0.26.0"

[tool.poetry.group.dev.dependencies]
pre-commit="^3.6.0"
ruff="^0.1.11"
nest_asyncio="^1.5.8"
pytest-cov="^4.1.0"
pytest="^7.4.4"
pytest-asyncio="^0.23.3"
aiosqlite = "^0.19.0"
polyfactory = "^2.13.0"


[tool.hatch.build.targets.wheel]
packages = ["backend"]

[tool.pytest.ini_options]
addopts = "-vv -rA --disable-warnings --cov=app --cov-report term-missing"
testpaths = [
    "tests",
]
asyncio_mode = "auto"
pythonpath = [
    "."
]


[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP",  # pyupgrade
]
ignore = [
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191", # indentation contains tabs
    "E711", # `None` should be `cond is None`
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]


[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
